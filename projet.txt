==== FICHIERS UTILES DU PROJET LARAVEL (avec contenu) ====

# routes/auth.php

<?php

use App\Http\Controllers\Auth\AuthenticatedSessionController;
use App\Http\Controllers\Auth\ConfirmablePasswordController;
use App\Http\Controllers\Auth\EmailVerificationNotificationController;
use App\Http\Controllers\Auth\EmailVerificationPromptController;
use App\Http\Controllers\Auth\NewPasswordController;
use App\Http\Controllers\Auth\PasswordController;
use App\Http\Controllers\Auth\PasswordResetLinkController;
use App\Http\Controllers\Auth\RegisteredUserController;
use App\Http\Controllers\Auth\VerifyEmailController;
use Illuminate\Support\Facades\Route;

Route::middleware('guest')->group(function () {
    Route::get('register', [RegisteredUserController::class, 'create'])
        ->name('register');

    Route::post('register', [RegisteredUserController::class, 'store']);

    Route::get('login', [AuthenticatedSessionController::class, 'create'])
        ->name('login');

    Route::post('login', [AuthenticatedSessionController::class, 'store']);

    Route::get('forgot-password', [PasswordResetLinkController::class, 'create'])
        ->name('password.request');

    Route::post('forgot-password', [PasswordResetLinkController::class, 'store'])
        ->name('password.email');

    Route::get('reset-password/{token}', [NewPasswordController::class, 'create'])
        ->name('password.reset');

    Route::post('reset-password', [NewPasswordController::class, 'store'])
        ->name('password.store');
});

Route::middleware('auth')->group(function () {
    Route::get('verify-email', EmailVerificationPromptController::class)
        ->name('verification.notice');

    Route::get('verify-email/{id}/{hash}', VerifyEmailController::class)
        ->middleware(['signed', 'throttle:6,1'])
        ->name('verification.verify');

    Route::post('email/verification-notification', [EmailVerificationNotificationController::class, 'store'])
        ->middleware('throttle:6,1')
        ->name('verification.send');

    Route::get('confirm-password', [ConfirmablePasswordController::class, 'show'])
        ->name('password.confirm');

    Route::post('confirm-password', [ConfirmablePasswordController::class, 'store']);

    Route::put('password', [PasswordController::class, 'update'])->name('password.update');

    Route::post('logout', [AuthenticatedSessionController::class, 'destroy'])
        ->name('logout');
});


# routes/console.php

<?php

use Illuminate\Foundation\Inspiring;
use Illuminate\Support\Facades\Artisan;

Artisan::command('inspire', function () {
    $this->comment(Inspiring::quote());
})->purpose('Display an inspiring quote');


# routes/web.php

<?php

use Illuminate\Support\Facades\Route;
use App\Http\Controllers\PlantsController;
use App\Http\Controllers\OrdersController;
use App\Http\Controllers\UsersController;
use App\Http\Controllers\CartController;
use App\Http\Controllers\Admin\PlantsController as AdminPlantsController;
use App\Http\Controllers\Admin\UsersController as AdminUsersController;

Route::get('/', [PlantsController::class, 'index'])->name('home');

Route::middleware(['auth'])->group(function () {
    Route::resource('orders', OrdersController::class)->only(['index', 'create', 'store']);
    Route::resource('users', UsersController::class)->only(['show', 'edit', 'update']);
});

Route::resource('plants', PlantsController::class)->only(['index', 'show']);

Route::get('/carts', [CartController::class, 'index'])->name('carts.index');

Route::middleware(['auth'])->prefix('admin')->name('admin.')->group(function () {
    Route::resource('plants', AdminPlantsController::class)->except(['show']);
    Route::resource('users', AdminUsersController::class)->only(['index', 'show', 'edit', 'update', 'destroy']);
});

require __DIR__.'/auth.php';


# database/migrations/2025_05_02_190618_create_sessions_table.php

<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration
{
    /**
     * Run the migrations.
     */
    public function up(): void
    {
        Schema::create('sessions', function (Blueprint $table) {
            $table->string('id')->primary();
            $table->foreignId('user_id')->nullable()->index();
            $table->string('ip_address', 45)->nullable();
            $table->text('user_agent')->nullable();
            $table->longText('payload');
            $table->integer('last_activity')->index();
        });
    }

    /**
     * Reverse the migrations.
     */
    public function down(): void
    {
        Schema::dropIfExists('sessions');
    }
};


# database/migrations/2025_05_02_162735_setup_all_tables.php

<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration {
    public function up(): void
    {
        Schema::create('users', function (Blueprint $table) {
            $table->id();
            $table->string('name');
            $table->string('email')->unique();
            $table->timestamp('email_verified_at')->nullable();
            $table->string('password');
            $table->boolean('admin')->default(false);
            $table->rememberToken();
            $table->timestamps();
        });

        Schema::create('plants', function (Blueprint $table) {
            $table->id();
            $table->string('name');
            $table->integer('price');
            $table->text('description')->nullable();
            $table->integer('stock');
            $table->timestamps();
        });

        Schema::create('orders', function (Blueprint $table) {
            $table->id();
            $table->foreignId('user_id')->constrained()->onDelete('cascade');
            $table->integer('total_price')->default(0);
            $table->string('status');
            $table->timestamps();
        });

        Schema::create('order_items', function (Blueprint $table) {
            $table->id();
            $table->foreignId('order_id')->constrained()->onDelete('cascade');
            $table->foreignId('plant_id')->constrained()->onDelete('cascade');
            $table->integer('quantity');
            $table->timestamps();
        });
    }

    public function down(): void
    {
        Schema::dropIfExists('order_items');
        Schema::dropIfExists('orders');
        Schema::dropIfExists('plants');
        Schema::dropIfExists('users');
    }
};


# app/Models/User.php

<?php

namespace App\Models;

// use Illuminate\Contracts\Auth\MustVerifyEmail;
use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Foundation\Auth\User as Authenticatable;
use Illuminate\Database\Eloquent\Relations\HasMany;
use Illuminate\Notifications\Notifiable;

class User extends Authenticatable
{
	/** @use HasFactory<\Database\Factories\UserFactory> */
	use HasFactory, Notifiable;

	/**
	 * The attributes that are mass assignable.
	 *
	 * @var list<string>
	 */
	protected $fillable = [
		'name',
		'email',
		'password',
    'admin',
	];

	/**
	 * The attributes that should be hidden for serialization.
	 *
	 * @var list<string>
	 */
	protected $hidden = [
		'password',
		'remember_token',
	];

	/**
	 * Get the attributes that should be cast.
	 *
	 * @return array<string, string>
	 */
	protected function casts(): array
	{
		return [
			'email_verified_at' => 'datetime',
			'password' => 'hashed',
		];
	}

	public function orders(): HasMany
	{
		return $this->hasMany(Order::class);
	}
}


# app/Models/Models/User.php

<?php

namespace App\Models\Models;

use Illuminate\Database\Eloquent\Model;

class User extends Model
{
    //
}


# app/Models/Models/Order.php

<?php

namespace App\Models\Models;

use Illuminate\Database\Eloquent\Model;

class Order extends Model
{
    //
}


# app/Models/Models/OrderItem.php

<?php

namespace App\Models\Models;

use Illuminate\Database\Eloquent\Model;

class OrderItem extends Model
{
    //
}


# app/Models/Models/Plant.php

<?php

namespace App\Models\Models;

use Illuminate\Database\Eloquent\Model;

class Plant extends Model
{
    //
}


# app/Models/Order.php

<?php

namespace App\Models;

use Illuminate\Database\Eloquent\Model;
use Illuminate\Database\Eloquent\Relations\BelongsTo;
use Illuminate\Database\Eloquent\Relations\HasMany;

class Order extends Model
{
    protected $fillable = ['user_id', 'total_price', 'status'];

    public function user(): BelongsTo
    {
        return $this->belongsTo(User::class);
    }

    public function orderItems(): HasMany
    {
        return $this->hasMany(OrderItem::class);
    }
}


# app/Models/OrderItem.php

<?php

namespace App\Models;

use Illuminate\Database\Eloquent\Model;
use Illuminate\Database\Eloquent\Relations\BelongsTo;

class OrderItem extends Model
{
    protected $fillable = ['order_id', 'plant_id', 'quantity'];

    public function order(): BelongsTo
    {
        return $this->belongsTo(Order::class);
    }

    public function plant(): BelongsTo
    {
        return $this->belongsTo(Plant::class);
    }
}


# app/Models/Plant.php

<?php

namespace App\Models;

use Illuminate\Database\Eloquent\Model;
use Illuminate\Database\Eloquent\Relations\HasMany;

class Plant extends Model
{
    protected $fillable = ['name', 'price', 'description', 'stock'];

    public function orderItems(): HasMany
    {
        return $this->hasMany(OrderItem::class);
    }
}


# app/Http/Controllers/OrdersController.php

<?php

namespace App\Http\Controllers;

use Illuminate\Http\Request;
use Illuminate\Support\Facades\Log;
use Illuminate\Support\Facades\Auth;
use App\Models\Order;
use App\Models\OrderItem;
use App\Models\Plant;
use Illuminate\Support\Facades\DB;

class OrdersController extends Controller
{
	public function index()
	{
		$orders = Auth::user()->orders()->with('orderItems.plant')->get()->each(function ($order) {
			$order->items = $order->orderItems;
		});
		return view('orders.index', compact('orders'));
	}

	public function create()
	{
		return view('orders.new');
	}

	public function store(Request $request)
	{
		$items = json_decode($request->input('items'), true);
		$total = 0;

		try {
			DB::beginTransaction();

			// Valider les stocks d'abord
			foreach ($items as $item) {
				$plant = Plant::findOrFail($item['plant_id']);
				$qty = intval($item['quantity']);

				if ($plant->stock < $qty) {
					DB::rollBack();
					return redirect()
						->route('orders.create')
						->with('error', "Stock insuffisant pour {$plant->name}")
						->with('stock_adjust', ['id' => $plant->id, 'available' => $plant->stock]);
				}
			}

			// Création après validation
			$order = Order::create([
				'user_id' => Auth::id(),
				'status' => 'confirmed',
				'total_price' => 0,
			]);

			// Traitement des items
			foreach ($items as $item) {
				$plant = Plant::findOrFail($item['plant_id']);
				$qty = intval($item['quantity']);

				$plant->decrement('stock', $qty);
				OrderItem::create([
					'order_id' => $order->id,
					'plant_id' => $plant->id,
					'quantity' => $qty,
				]);

				$total += $plant->price * $qty;
			}

			$order->update(['total_price' => $total]);

			DB::commit();
			return redirect()->route('orders.create')->with('success', true);
		} catch (\Exception $e) {
			DB::rollBack();
			return redirect()
				->route('orders.create')
				->with('error', "Erreur commande : " . $e->getMessage());
		}
	}
}


# app/Http/Controllers/Admin/UsersController.php

<?php

namespace App\Http\Controllers\Admin;

use App\Http\Controllers\Controller;
use App\Models\User;
use Illuminate\Http\Request;

class UsersController extends Controller
{
	public function index()
	{
		$users = User::orderBy('admin', 'desc')->orderBy('name')->get();
		return view('admin.users.index', compact('users'));
	}

	public function show(User $user)
	{
		return view('admin.users.show', compact('user'));
	}

	public function edit(User $user)
	{
		return view('admin.users.edit', compact('user'));
	}

	public function update(Request $request, User $user)
	{
		$data = $request->validate([
			'name' => 'required|string',
			'email' => 'required|email',
		]);

		$data['admin'] = $request->has('admin');

		$user->update($data);
		return redirect()->route('admin.users.index')->with('success', 'Utilisateur mis à jour.');
	}

	public function destroy(User $user)
	{
		$user->delete();
		return redirect()->route('admin.users.index')->with('success', 'Utilisateur supprimé.');
	}
}


# app/Http/Controllers/Admin/PlantsController.php

<?php

namespace App\Http\Controllers\Admin;

use App\Http\Controllers\Controller;
use App\Models\Plant;
use Illuminate\Http\Request;

class PlantsController extends Controller
{
	public function index()
	{
		return view('admin.plants.index', ['plants' => Plant::orderBy('name')->get()]);
	}

	public function create()
	{
		return view('admin.plants.create', ['plant' => new Plant()]);
	}

	public function store(Request $request)
	{
		$plant = Plant::create($request->validate([
			'name' => 'required|string',
			'price' => 'required|integer',
			'description' => 'nullable|string',
			'stock' => 'required|integer',
		]));
		return redirect()->route('admin.plants.index');
	}

	public function edit(Plant $plant)
	{
		return view('admin.plants.edit', ['plant' => $plant]);
	}

	public function update(Request $request, Plant $plant)
	{
		$plant->update($request->validate([
			'name' => 'required|string',
			'price' => 'required|integer',
			'description' => 'nullable|string',
			'stock' => 'required|integer',
		]));
		return redirect()->route('admin.plants.index');
	}

	public function destroy(Plant $plant)
	{
		$plant->delete();
		return redirect()->route('admin.plants.index');
	}
}


# app/Http/Controllers/Auth/PasswordController.php

<?php

namespace App\Http\Controllers\Auth;

use App\Http\Controllers\Controller;
use Illuminate\Http\RedirectResponse;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Hash;
use Illuminate\Validation\Rules\Password;

class PasswordController extends Controller
{
    /**
     * Update the user's password.
     */
    public function update(Request $request): RedirectResponse
    {
        $validated = $request->validateWithBag('updatePassword', [
            'current_password' => ['required', 'current_password'],
            'password' => ['required', Password::defaults(), 'confirmed'],
        ]);

        $request->user()->update([
            'password' => Hash::make($validated['password']),
        ]);

        return back()->with('status', 'password-updated');
    }
}


# app/Http/Controllers/Auth/RegisteredUserController.php

<?php

namespace App\Http\Controllers\Auth;

use App\Http\Controllers\Controller;
use App\Models\User;
use Illuminate\Auth\Events\Registered;
use Illuminate\Http\RedirectResponse;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Auth;
use Illuminate\Support\Facades\Hash;
use Illuminate\Validation\Rules;
use Illuminate\View\View;

class RegisteredUserController extends Controller
{
    /**
     * Display the registration view.
     */
    public function create(): View
    {
        return view('auth.custom-register');
    }

    /**
     * Handle an incoming registration request.
     *
     * @throws \Illuminate\Validation\ValidationException
     */
    public function store(Request $request): RedirectResponse
    {
        $request->validate([
            'name' => ['required', 'string', 'max:255'],
            'email' => ['required', 'string', 'lowercase', 'email', 'max:255', 'unique:'.User::class],
            'password' => ['required', 'confirmed', Rules\Password::defaults()],
        ]);

        $user = User::create([
            'name' => $request->name,
            'email' => $request->email,
            'password' => Hash::make($request->password),
        ]);

        event(new Registered($user));

        Auth::login($user);

        return redirect()->route('home');
    }
}


# app/Http/Controllers/Auth/PasswordResetLinkController.php

<?php

namespace App\Http\Controllers\Auth;

use App\Http\Controllers\Controller;
use Illuminate\Http\RedirectResponse;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Password;
use Illuminate\View\View;

class PasswordResetLinkController extends Controller
{
    /**
     * Display the password reset link request view.
     */
    public function create(): View
    {
        return view('auth.forgot-password');
    }

    /**
     * Handle an incoming password reset link request.
     *
     * @throws \Illuminate\Validation\ValidationException
     */
    public function store(Request $request): RedirectResponse
    {
        $request->validate([
            'email' => ['required', 'email'],
        ]);

        // We will send the password reset link to this user. Once we have attempted
        // to send the link, we will examine the response then see the message we
        // need to show to the user. Finally, we'll send out a proper response.
        $status = Password::sendResetLink(
            $request->only('email')
        );

        return $status == Password::RESET_LINK_SENT
                    ? back()->with('status', __($status))
                    : back()->withInput($request->only('email'))
                        ->withErrors(['email' => __($status)]);
    }
}


# app/Http/Controllers/Auth/AuthenticatedSessionController.php

<?php

namespace App\Http\Controllers\Auth;

use App\Http\Controllers\Controller;
use App\Http\Requests\Auth\LoginRequest;
use Illuminate\Http\RedirectResponse;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Auth;
use Illuminate\View\View;

class AuthenticatedSessionController extends Controller
{
    /**
     * Display the login view.
     */
    public function create(): View
    {
        return view('auth.custom-login');
    }

    /**
     * Handle an incoming authentication request.
     */
    public function store(LoginRequest $request): RedirectResponse
    {
        $request->authenticate();

        $request->session()->regenerate();

        return redirect()->route('home');
    }

    /**
     * Destroy an authenticated session.
     */
    public function destroy(Request $request): RedirectResponse
    {
        Auth::guard('web')->logout();

        $request->session()->invalidate();

        $request->session()->regenerateToken();

        return redirect('/');
    }
}


# app/Http/Controllers/Auth/VerifyEmailController.php

<?php

namespace App\Http\Controllers\Auth;

use App\Http\Controllers\Controller;
use Illuminate\Auth\Events\Verified;
use Illuminate\Foundation\Auth\EmailVerificationRequest;
use Illuminate\Http\RedirectResponse;

class VerifyEmailController extends Controller
{
    /**
     * Mark the authenticated user's email address as verified.
     */
    public function __invoke(EmailVerificationRequest $request): RedirectResponse
    {
        if ($request->user()->hasVerifiedEmail()) {
            return redirect()->intended(route('dashboard', absolute: false).'?verified=1');
        }

        if ($request->user()->markEmailAsVerified()) {
            event(new Verified($request->user()));
        }

        return redirect()->intended(route('dashboard', absolute: false).'?verified=1');
    }
}


# app/Http/Controllers/Auth/NewPasswordController.php

<?php

namespace App\Http\Controllers\Auth;

use App\Http\Controllers\Controller;
use App\Models\User;
use Illuminate\Auth\Events\PasswordReset;
use Illuminate\Http\RedirectResponse;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Hash;
use Illuminate\Support\Facades\Password;
use Illuminate\Support\Str;
use Illuminate\Validation\Rules;
use Illuminate\View\View;

class NewPasswordController extends Controller
{
    /**
     * Display the password reset view.
     */
    public function create(Request $request): View
    {
        return view('auth.reset-password', ['request' => $request]);
    }

    /**
     * Handle an incoming new password request.
     *
     * @throws \Illuminate\Validation\ValidationException
     */
    public function store(Request $request): RedirectResponse
    {
        $request->validate([
            'token' => ['required'],
            'email' => ['required', 'email'],
            'password' => ['required', 'confirmed', Rules\Password::defaults()],
        ]);

        // Here we will attempt to reset the user's password. If it is successful we
        // will update the password on an actual user model and persist it to the
        // database. Otherwise we will parse the error and return the response.
        $status = Password::reset(
            $request->only('email', 'password', 'password_confirmation', 'token'),
            function (User $user) use ($request) {
                $user->forceFill([
                    'password' => Hash::make($request->password),
                    'remember_token' => Str::random(60),
                ])->save();

                event(new PasswordReset($user));
            }
        );

        // If the password was successfully reset, we will redirect the user back to
        // the application's home authenticated view. If there is an error we can
        // redirect them back to where they came from with their error message.
        return $status == Password::PASSWORD_RESET
                    ? redirect()->route('login')->with('status', __($status))
                    : back()->withInput($request->only('email'))
                        ->withErrors(['email' => __($status)]);
    }
}


# app/Http/Controllers/Auth/EmailVerificationNotificationController.php

<?php

namespace App\Http\Controllers\Auth;

use App\Http\Controllers\Controller;
use Illuminate\Http\RedirectResponse;
use Illuminate\Http\Request;

class EmailVerificationNotificationController extends Controller
{
    /**
     * Send a new email verification notification.
     */
    public function store(Request $request): RedirectResponse
    {
        if ($request->user()->hasVerifiedEmail()) {
            return redirect()->intended(route('dashboard', absolute: false));
        }

        $request->user()->sendEmailVerificationNotification();

        return back()->with('status', 'verification-link-sent');
    }
}


# app/Http/Controllers/Auth/EmailVerificationPromptController.php

<?php

namespace App\Http\Controllers\Auth;

use App\Http\Controllers\Controller;
use Illuminate\Http\RedirectResponse;
use Illuminate\Http\Request;
use Illuminate\View\View;

class EmailVerificationPromptController extends Controller
{
    /**
     * Display the email verification prompt.
     */
    public function __invoke(Request $request): RedirectResponse|View
    {
        return $request->user()->hasVerifiedEmail()
                    ? redirect()->intended(route('dashboard', absolute: false))
                    : view('auth.verify-email');
    }
}


# app/Http/Controllers/Auth/ConfirmablePasswordController.php

<?php

namespace App\Http\Controllers\Auth;

use App\Http\Controllers\Controller;
use Illuminate\Http\RedirectResponse;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Auth;
use Illuminate\Validation\ValidationException;
use Illuminate\View\View;

class ConfirmablePasswordController extends Controller
{
    /**
     * Show the confirm password view.
     */
    public function show(): View
    {
        return view('auth.confirm-password');
    }

    /**
     * Confirm the user's password.
     */
    public function store(Request $request): RedirectResponse
    {
        if (! Auth::guard('web')->validate([
            'email' => $request->user()->email,
            'password' => $request->password,
        ])) {
            throw ValidationException::withMessages([
                'password' => __('auth.password'),
            ]);
        }

        $request->session()->put('auth.password_confirmed_at', time());

        return redirect()->intended(route('dashboard', absolute: false));
    }
}


# app/Http/Controllers/UsersController.php

<?php

namespace App\Http\Controllers;

use Illuminate\Http\Request;
use Illuminate\Support\Facades\Auth;
use App\Models\User;

class UsersController extends Controller
{
    public function show(User $user) {
        abort_unless(Auth::id() === $user->id, 403);
        return view('users.show', compact('user'));
    }

    public function edit(User $user) {
        abort_unless(Auth::id() === $user->id, 403);
        return view('users.edit', compact('user'));
    }

    public function update(Request $request, User $user) {
        abort_unless(Auth::id() === $user->id, 403);

        $data = $request->validate([
            'name' => 'required|string|max:255',
            'email' => 'required|email',
        ]);

        $user->update($data);

        return redirect()->route('users.show', $user)->with('success', 'Profil mis à jour.');
    }
}


# app/Http/Controllers/ProfileController.php

<?php

namespace App\Http\Controllers;

use App\Http\Requests\ProfileUpdateRequest;
use Illuminate\Http\RedirectResponse;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Auth;
use Illuminate\Support\Facades\Redirect;
use Illuminate\View\View;

class ProfileController extends Controller
{
    /**
     * Display the user's profile form.
     */
    public function edit(Request $request): View
    {
        return view('profile.edit', [
            'user' => $request->user(),
        ]);
    }

    /**
     * Update the user's profile information.
     */
    public function update(ProfileUpdateRequest $request): RedirectResponse
    {
        $request->user()->fill($request->validated());

        if ($request->user()->isDirty('email')) {
            $request->user()->email_verified_at = null;
        }

        $request->user()->save();

        return Redirect::route('profile.edit')->with('status', 'profile-updated');
    }

    /**
     * Delete the user's account.
     */
    public function destroy(Request $request): RedirectResponse
    {
        $request->validateWithBag('userDeletion', [
            'password' => ['required', 'current_password'],
        ]);

        $user = $request->user();

        Auth::logout();

        $user->delete();

        $request->session()->invalidate();
        $request->session()->regenerateToken();

        return Redirect::to('/');
    }
}


# app/Http/Controllers/Controller.php

<?php

namespace App\Http\Controllers;

use Illuminate\Foundation\Auth\Access\AuthorizesRequests;
use Illuminate\Foundation\Bus\DispatchesJobs;
use Illuminate\Foundation\Validation\ValidatesRequests;
use Illuminate\Routing\Controller as BaseController;

class Controller extends BaseController
{
    use AuthorizesRequests, DispatchesJobs, ValidatesRequests;
}


# app/Http/Controllers/PlantsController.php

<?php

namespace App\Http\Controllers;

use App\Models\Plant;
use Illuminate\Http\Request;

class PlantsController extends Controller
{
    public function index()
    {
			return view('plants.index', ['plants' => Plant::where('stock', '>', 0)->orderBy('name')->get()]);
    }

    public function show(Plant $plant)
    {
        return view('plants.show', ['plant' => $plant]);
    }
}


# app/Http/Controllers/CartController.php

<?php

namespace App\Http\Controllers;

use Illuminate\Http\Request;

class CartController extends Controller
{
    public function index()
    {
        return view('carts.index');
    }
}


# resources/views/components/application-logo.blade.php

<svg viewBox="0 0 316 316" xmlns="http://www.w3.org/2000/svg" {{ $attributes }}>
    <path d="M305.8 81.125C305.77 80.995 305.69 80.885 305.65 80.755C305.56 80.525 305.49 80.285 305.37 80.075C305.29 79.935 305.17 79.815 305.07 79.685C304.94 79.515 304.83 79.325 304.68 79.175C304.55 79.045 304.39 78.955 304.25 78.845C304.09 78.715 303.95 78.575 303.77 78.475L251.32 48.275C249.97 47.495 248.31 47.495 246.96 48.275L194.51 78.475C194.33 78.575 194.19 78.725 194.03 78.845C193.89 78.955 193.73 79.045 193.6 79.175C193.45 79.325 193.34 79.515 193.21 79.685C193.11 79.815 192.99 79.935 192.91 80.075C192.79 80.285 192.71 80.525 192.63 80.755C192.58 80.875 192.51 80.995 192.48 81.125C192.38 81.495 192.33 81.875 192.33 82.265V139.625L148.62 164.795V52.575C148.62 52.185 148.57 51.805 148.47 51.435C148.44 51.305 148.36 51.195 148.32 51.065C148.23 50.835 148.16 50.595 148.04 50.385C147.96 50.245 147.84 50.125 147.74 49.995C147.61 49.825 147.5 49.635 147.35 49.485C147.22 49.355 147.06 49.265 146.92 49.155C146.76 49.025 146.62 48.885 146.44 48.785L93.99 18.585C92.64 17.805 90.98 17.805 89.63 18.585L37.18 48.785C37 48.885 36.86 49.035 36.7 49.155C36.56 49.265 36.4 49.355 36.27 49.485C36.12 49.635 36.01 49.825 35.88 49.995C35.78 50.125 35.66 50.245 35.58 50.385C35.46 50.595 35.38 50.835 35.3 51.065C35.25 51.185 35.18 51.305 35.15 51.435C35.05 51.805 35 52.185 35 52.575V232.235C35 233.795 35.84 235.245 37.19 236.025L142.1 296.425C142.33 296.555 142.58 296.635 142.82 296.725C142.93 296.765 143.04 296.835 143.16 296.865C143.53 296.965 143.9 297.015 144.28 297.015C144.66 297.015 145.03 296.965 145.4 296.865C145.5 296.835 145.59 296.775 145.69 296.745C145.95 296.655 146.21 296.565 146.45 296.435L251.36 236.035C252.72 235.255 253.55 233.815 253.55 232.245V174.885L303.81 145.945C305.17 145.165 306 143.725 306 142.155V82.265C305.95 81.875 305.89 81.495 305.8 81.125ZM144.2 227.205L100.57 202.515L146.39 176.135L196.66 147.195L240.33 172.335L208.29 190.625L144.2 227.205ZM244.75 114.995V164.795L226.39 154.225L201.03 139.625V89.825L219.39 100.395L244.75 114.995ZM249.12 57.105L292.81 82.265L249.12 107.425L205.43 82.265L249.12 57.105ZM114.49 184.425L96.13 194.995V85.305L121.49 70.705L139.85 60.135V169.815L114.49 184.425ZM91.76 27.425L135.45 52.585L91.76 77.745L48.07 52.585L91.76 27.425ZM43.67 60.135L62.03 70.705L87.39 85.305V202.545V202.555V202.565C87.39 202.735 87.44 202.895 87.46 203.055C87.49 203.265 87.49 203.485 87.55 203.695V203.705C87.6 203.875 87.69 204.035 87.76 204.195C87.84 204.375 87.89 204.575 87.99 204.745C87.99 204.745 87.99 204.755 88 204.755C88.09 204.905 88.22 205.035 88.33 205.175C88.45 205.335 88.55 205.495 88.69 205.635L88.7 205.645C88.82 205.765 88.98 205.855 89.12 205.965C89.28 206.085 89.42 206.225 89.59 206.325C89.6 206.325 89.6 206.325 89.61 206.335C89.62 206.335 89.62 206.345 89.63 206.345L139.87 234.775V285.065L43.67 229.705V60.135ZM244.75 229.705L148.58 285.075V234.775L219.8 194.115L244.75 179.875V229.705ZM297.2 139.625L253.49 164.795V114.995L278.85 100.395L297.21 89.825V139.625H297.2Z"/>
</svg>


# resources/views/components/input-label.blade.php

@props(['value'])

<label {{ $attributes->merge(['class' => 'block font-medium text-sm text-gray-700']) }}>
    {{ $value ?? $slot }}
</label>


# resources/views/components/nav-link.blade.php

@props(['active'])

@php
$classes = ($active ?? false)
            ? 'inline-flex items-center px-1 pt-1 border-b-2 border-indigo-400 text-sm font-medium leading-5 text-gray-900 focus:outline-none focus:border-indigo-700 transition duration-150 ease-in-out'
            : 'inline-flex items-center px-1 pt-1 border-b-2 border-transparent text-sm font-medium leading-5 text-gray-500 hover:text-gray-700 hover:border-gray-300 focus:outline-none focus:text-gray-700 focus:border-gray-300 transition duration-150 ease-in-out';
@endphp

<a {{ $attributes->merge(['class' => $classes]) }}>
    {{ $slot }}
</a>


# resources/views/components/responsive-nav-link.blade.php

@props(['active'])

@php
$classes = ($active ?? false)
            ? 'block w-full ps-3 pe-4 py-2 border-l-4 border-indigo-400 text-start text-base font-medium text-indigo-700 bg-indigo-50 focus:outline-none focus:text-indigo-800 focus:bg-indigo-100 focus:border-indigo-700 transition duration-150 ease-in-out'
            : 'block w-full ps-3 pe-4 py-2 border-l-4 border-transparent text-start text-base font-medium text-gray-600 hover:text-gray-800 hover:bg-gray-50 hover:border-gray-300 focus:outline-none focus:text-gray-800 focus:bg-gray-50 focus:border-gray-300 transition duration-150 ease-in-out';
@endphp

<a {{ $attributes->merge(['class' => $classes]) }}>
    {{ $slot }}
</a>


# resources/views/components/dropdown-link.blade.php

<a {{ $attributes->merge(['class' => 'block w-full px-4 py-2 text-start text-sm leading-5 text-gray-700 hover:bg-gray-100 focus:outline-none focus:bg-gray-100 transition duration-150 ease-in-out']) }}>{{ $slot }}</a>


# resources/views/components/modal.blade.php

@props([
    'name',
    'show' => false,
    'maxWidth' => '2xl'
])

@php
$maxWidth = [
    'sm' => 'sm:max-w-sm',
    'md' => 'sm:max-w-md',
    'lg' => 'sm:max-w-lg',
    'xl' => 'sm:max-w-xl',
    '2xl' => 'sm:max-w-2xl',
][$maxWidth];
@endphp

<div
    x-data="{
        show: @js($show),
        focusables() {
            // All focusable element types...
            let selector = 'a, button, input:not([type=\'hidden\']), textarea, select, details, [tabindex]:not([tabindex=\'-1\'])'
            return [...$el.querySelectorAll(selector)]
                // All non-disabled elements...
                .filter(el => ! el.hasAttribute('disabled'))
        },
        firstFocusable() { return this.focusables()[0] },
        lastFocusable() { return this.focusables().slice(-1)[0] },
        nextFocusable() { return this.focusables()[this.nextFocusableIndex()] || this.firstFocusable() },
        prevFocusable() { return this.focusables()[this.prevFocusableIndex()] || this.lastFocusable() },
        nextFocusableIndex() { return (this.focusables().indexOf(document.activeElement) + 1) % (this.focusables().length + 1) },
        prevFocusableIndex() { return Math.max(0, this.focusables().indexOf(document.activeElement)) -1 },
    }"
    x-init="$watch('show', value => {
        if (value) {
            document.body.classList.add('overflow-y-hidden');
            {{ $attributes->has('focusable') ? 'setTimeout(() => firstFocusable().focus(), 100)' : '' }}
        } else {
            document.body.classList.remove('overflow-y-hidden');
        }
    })"
    x-on:open-modal.window="$event.detail == '{{ $name }}' ? show = true : null"
    x-on:close-modal.window="$event.detail == '{{ $name }}' ? show = false : null"
    x-on:close.stop="show = false"
    x-on:keydown.escape.window="show = false"
    x-on:keydown.tab.prevent="$event.shiftKey || nextFocusable().focus()"
    x-on:keydown.shift.tab.prevent="prevFocusable().focus()"
    x-show="show"
    class="fixed inset-0 overflow-y-auto px-4 py-6 sm:px-0 z-50"
    style="display: {{ $show ? 'block' : 'none' }};"
>
    <div
        x-show="show"
        class="fixed inset-0 transform transition-all"
        x-on:click="show = false"
        x-transition:enter="ease-out duration-300"
        x-transition:enter-start="opacity-0"
        x-transition:enter-end="opacity-100"
        x-transition:leave="ease-in duration-200"
        x-transition:leave-start="opacity-100"
        x-transition:leave-end="opacity-0"
    >
        <div class="absolute inset-0 bg-gray-500 opacity-75"></div>
    </div>

    <div
        x-show="show"
        class="mb-6 bg-white rounded-lg overflow-hidden shadow-xl transform transition-all sm:w-full {{ $maxWidth }} sm:mx-auto"
        x-transition:enter="ease-out duration-300"
        x-transition:enter-start="opacity-0 translate-y-4 sm:translate-y-0 sm:scale-95"
        x-transition:enter-end="opacity-100 translate-y-0 sm:scale-100"
        x-transition:leave="ease-in duration-200"
        x-transition:leave-start="opacity-100 translate-y-0 sm:scale-100"
        x-transition:leave-end="opacity-0 translate-y-4 sm:translate-y-0 sm:scale-95"
    >
        {{ $slot }}
    </div>
</div>


# resources/views/components/danger-button.blade.php

<button {{ $attributes->merge(['type' => 'submit', 'class' => 'inline-flex items-center px-4 py-2 bg-red-600 border border-transparent rounded-md font-semibold text-xs text-white uppercase tracking-widest hover:bg-red-500 active:bg-red-700 focus:outline-none focus:ring-2 focus:ring-red-500 focus:ring-offset-2 transition ease-in-out duration-150']) }}>
    {{ $slot }}
</button>


# resources/views/components/primary-button.blade.php

<button {{ $attributes->merge(['type' => 'submit', 'class' => 'inline-flex items-center px-4 py-2 bg-gray-800 border border-transparent rounded-md font-semibold text-xs text-white uppercase tracking-widest hover:bg-gray-700 focus:bg-gray-700 active:bg-gray-900 focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:ring-offset-2 transition ease-in-out duration-150']) }}>
    {{ $slot }}
</button>


# resources/views/components/dropdown.blade.php

@props(['align' => 'right', 'width' => '48', 'contentClasses' => 'py-1 bg-white'])

@php
$alignmentClasses = match ($align) {
    'left' => 'ltr:origin-top-left rtl:origin-top-right start-0',
    'top' => 'origin-top',
    default => 'ltr:origin-top-right rtl:origin-top-left end-0',
};

$width = match ($width) {
    '48' => 'w-48',
    default => $width,
};
@endphp

<div class="relative" x-data="{ open: false }" @click.outside="open = false" @close.stop="open = false">
    <div @click="open = ! open">
        {{ $trigger }}
    </div>

    <div x-show="open"
            x-transition:enter="transition ease-out duration-200"
            x-transition:enter-start="opacity-0 scale-95"
            x-transition:enter-end="opacity-100 scale-100"
            x-transition:leave="transition ease-in duration-75"
            x-transition:leave-start="opacity-100 scale-100"
            x-transition:leave-end="opacity-0 scale-95"
            class="absolute z-50 mt-2 {{ $width }} rounded-md shadow-lg {{ $alignmentClasses }}"
            style="display: none;"
            @click="open = false">
        <div class="rounded-md ring-1 ring-black ring-opacity-5 {{ $contentClasses }}">
            {{ $content }}
        </div>
    </div>
</div>


# resources/views/components/text-input.blade.php

@props(['disabled' => false])

<input @disabled($disabled) {{ $attributes->merge(['class' => 'border-gray-300 focus:border-indigo-500 focus:ring-indigo-500 rounded-md shadow-sm']) }}>


# resources/views/components/secondary-button.blade.php

<button {{ $attributes->merge(['type' => 'button', 'class' => 'inline-flex items-center px-4 py-2 bg-white border border-gray-300 rounded-md font-semibold text-xs text-gray-700 uppercase tracking-widest shadow-sm hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:ring-offset-2 disabled:opacity-25 transition ease-in-out duration-150']) }}>
    {{ $slot }}
</button>


# resources/views/components/input-error.blade.php

@props(['messages'])

@if ($messages)
    <ul {{ $attributes->merge(['class' => 'text-sm text-red-600 space-y-1']) }}>
        @foreach ((array) $messages as $message)
            <li>{{ $message }}</li>
        @endforeach
    </ul>
@endif


# resources/views/components/auth-session-status.blade.php

@props(['status'])

@if ($status)
    <div {{ $attributes->merge(['class' => 'font-medium text-sm text-green-600']) }}>
        {{ $status }}
    </div>
@endif


# resources/views/admin/plants/_form.blade.php

@php($isEdit = isset($plant))
<form method="POST" action="{{ $isEdit ? route('admin.plants.update',$plant) : route('admin.plants.store') }}">
  @csrf @if($isEdit) @method('PUT') @endif
  <div class="mb-3"><label class="form-label">Nom</label><input class="form-control rounded-3" name="name" value="{{ old('name',$plant->name??'') }}"></div>
  <div class="mb-3"><label class="form-label">Prix (€)</label><input type="number" class="form-control rounded-3" name="price" value="{{ old('price',$plant->price??'') }}"></div>
  <div class="mb-3"><label class="form-label">Description</label><textarea class="form-control rounded-3" rows="3" name="description">{{ old('description',$plant->description??'') }}</textarea></div>
  <div class="mb-3"><label class="form-label">Stock</label><input type="number" class="form-control rounded-3" name="stock" value="{{ old('stock',$plant->stock??'') }}"></div>
  <button class="btn btn-warning rounded-3">{{ $isEdit ? 'Mettre à jour' : 'Créer' }}</button>
</form>


# resources/views/admin/plants/create.blade.php

@extends('layouts.app')
@section('content')
<h1>Nouvelle plante</h1>
@include('admin.plants._form', ['plant' => null])
@endsection


# resources/views/admin/plants/edit.blade.php

@extends('layouts.app')
@section('content')
<h1>Modifier la plante</h1>
@include('admin.plants._form', ['plant' => $plant])
@endsection


# resources/views/admin/plants/index.blade.php

@extends('layouts.app')
@section('content')
<h1 class="mb-4">Gestion des plantes</h1>
<a class="btn btn-warning rounded-3 mb-3" href="{{ route('admin.plants.create') }}">Nouvelle plante</a>
<table class="table table-warning table-hover rounded-3 overflow-hidden">
  <thead><tr><th>Nom</th><th>Prix</th><th>Stock</th><th class="text-center">Actions</th></tr></thead><tbody>
  @foreach($plants as $p)
    <tr>
      <td><a class="text-decoration-none text-dark" href="{{ route('plants.show',$p) }}">{{ $p->name }}</a></td>
      <td>{{ $p->price }} €</td><td>{{ $p->stock }}</td>
      <td class="text-center">
        <a class="btn btn-sm btn-outline-dark rounded-3" href="{{ route('admin.plants.edit',$p) }}">✏</a>
        <form class="d-inline" method="POST" action="{{ route('admin.plants.destroy',$p) }}" onsubmit="return confirm('Supprimer ?')">@csrf @method('DELETE')
          <button class="btn btn-sm btn-danger rounded-3">🗑</button></form>
      </td>
    </tr>
  @endforeach
  </tbody>
</table>
@endsection


# resources/views/admin/users/show.blade.php

@extends('layouts.app')
@section('content')
<h1>{{ $user->name }}</h1>
<p><strong>Email :</strong> {{ $user->email }}</p>
<p><strong>Admin :</strong> {{ $user->admin ? 'Oui' : 'Non' }}</p>
<a class="btn btn-warning rounded-3" href="{{ route('admin.users.edit',$user) }}">Modifier</a>
@endsection


# resources/views/admin/users/edit.blade.php

@extends('layouts.app')
@section('content')
<h1>Modifier l’utilisateur</h1>
<form method="POST" action="{{ route('admin.users.update',$user) }}">@csrf @method('PUT')
  <div class="mb-3"><label class="form-label">Nom</label><input class="form-control rounded-3" name="name" value="{{ old('name',$user->name) }}"></div>
  <div class="mb-3"><label class="form-label">Email</label><input type="email" class="form-control rounded-3" name="email" value="{{ old('email',$user->email) }}"></div>
  <div class="form-check mb-3"><input class="form-check-input" type="checkbox" name="admin" id="isAdmin" {{ $user->admin?'checked':'' }}>
    <label class="form-check-label" for="isAdmin">Administrateur</label></div>
  <button class="btn btn-warning rounded-3">Enregistrer</button>
</form>
@endsection


# resources/views/admin/users/index.blade.php

@extends('layouts.app')
@section('content')
<h1 class="mb-4">Gestion des utilisateurs</h1>
<table class="table table-hover rounded-3 overflow-hidden">
 <thead class="table-warning"><tr><th>Nom</th><th>Email</th><th>Admin</th><th></th></tr></thead><tbody>
 @foreach($users as $u)
  <tr>
    <td><a href="{{ route('admin.users.show',$u) }}">{{ $u->name }}</a></td>
    <td>{{ $u->email }}</td>
    <td>{!! $u->admin ? '✅' : '—' !!}</td>
    <td class="text-end">
      <a class="btn btn-sm btn-outline-dark rounded-3" href="{{ route('admin.users.edit',$u) }}">✏</a>
      <form class="d-inline" method="POST" action="{{ route('admin.users.destroy',$u) }}" onsubmit="return confirm('Supprimer ?')">
        @csrf @method('DELETE')<button class="btn btn-sm btn-danger rounded-3">🗑</button>
      </form>
    </td>
  </tr>
 @endforeach
 </tbody>
</table>
@endsection


# resources/views/plants/show.blade.php

@extends('layouts.app')
@section('content')
    <div class="card shadow-lg rounded-3">
        <div class="card-body">
            <h1 class="card-title">{{ $plant->name }}</h1>
            <p><strong>Prix :</strong> {{ $plant->price }} €</p>
            <p><strong>Description :</strong> {{ $plant->description }}</p>
            @auth
                @if (Auth::user()->admin)
                    <p><strong>Stock :</strong> {{ $plant->stock }} unités</p>
                @endif
            @endauth

            <div class="d-flex gap-2 flex-wrap mb-3">
                <button class="btn btn-success rounded-3"
                    onclick="Cart.add({{ $plant->id }}, '{{ addslashes($plant->name) }}', {{ $plant->price }})">Ajouter au
                    panier</button>
                @auth
                    @if (Auth::user()->admin)
                        <a class="btn btn-warning rounded-3" href="{{ route('admin.plants.edit', $plant) }}">Modifier</a>
                        <form method="POST" action="{{ route('admin.plants.destroy', $plant) }}"
                            onsubmit="return confirm('Supprimer ?')">
                            @csrf @method('DELETE')
                            <button class="btn btn-danger rounded-3">Supprimer</button>
                        </form>
                    @endif
                @endauth
            </div>

            <a class="btn btn-secondary rounded-3" href="{{ route('plants.index') }}">Retour</a>
        </div>
    </div>
@endsection


# resources/views/plants/index.blade.php

@extends('layouts.app')
@section('content')
    <h1 class="text-center mb-4">🌿 Liste des plantes</h1>
    @auth @if (Auth::user()->admin)
        <a class="btn btn-warning mb-3 rounded-3" href="{{ route('admin.plants.create') }}">Nouvelle plante</a>
    @endif @endauth
    <div class="row">
        @foreach ($plants as $plant)
            <div class="col-md-4">
                <div class="card mb-4 shadow-sm">
                    <div class="card-body">
                        <h5 class="card-title"><a class="text-decoration-none text-dark"
                                href="{{ route('plants.show', $plant) }}">{{ $plant->name }}</a></h5>
                        <p class="card-text">
                            <strong>Prix :</strong> {{ $plant->price }} €
                            @auth
                                @if (Auth::user()->admin)
                                    <br><strong>Stock :</strong> {{ $plant->stock }}
                                @endif
                            @endauth
                        </p>
                        <button class="btn btn-success w-100 rounded-3"
                            onclick="Cart.add({{ $plant->id }}, '{{ addslashes($plant->name) }}', {{ $plant->price }}, {{ $plant->stock }})">Ajouter
                            au panier</button>
                    </div>
                </div>
            </div>
        @endforeach
    </div>
@endsection


# resources/views/carts/index.blade.php

@extends('layouts.app')

@section('content')
  <h1 class="mb-4">🛒 Mon Panier</h1>
	@if(session('alert'))
  <div class="alert alert-danger">{{ session('alert') }}</div>
	@endif
	@if(session('stock_adjust'))
    <div class="alert alert-warning mt-2" role="alert"
         data-stock-adjust='@json(session('stock_adjust'))'>
        Stock ajusté automatiquement sur un ou plusieurs articles.
    </div>
	@endif
  <div id="cart-container">
    <p class="alert alert-info">Chargement du panier...</p>
  </div>
@endsection


# resources/views/orders/create.blade.php

{{-- alias de new.blade.php pour RESTful resource --}}
@extends('orders.new')


# resources/views/orders/new.blade.php

@extends('layouts.app')

@section('content')
    @if (!session()->has('success') && !session()->has('error'))
        <h1 class="text-center mb-4">Valider ma commande</h1>
        <div id="order-review-container">
            <p class="alert alert-info">Chargement…</p>
        </div>
        <form id="order-form" method="POST" action="{{ route('orders.store') }}" class="mt-3">
            @csrf
            <input type="hidden" name="items" id="order-items-input">
            <button class="btn btn-success w-100 rounded-3">Confirmer la commande</button>
        </form>
    @else
        <script>
            document.addEventListener('DOMContentLoaded', function() {
                @if (session('success'))
                    // console.log("Commande réussie : vidage du panier.");
                    if (typeof Cart !== "undefined") Cart.clear();
                    window.location.href = "{{ route('orders.index') }}";
                @elseif (session('error'))
                    // console.error("Erreur détectée : redirection vers le panier.");
                    window.location.href = "{{ route('carts.index') }}";
                @endif
            });
        </script>
    @endif
@endsection


# resources/views/orders/index.blade.php

@extends('layouts.app')
@section('content')
<h1 class="text-center mb-4">📜 Mes commandes</h1>
@if($orders->isEmpty())
  <p class="alert alert-info">Aucune commande.</p>
@else
	@foreach($orders as $idx => $order)
	  <div class="card mb-3 shadow-sm rounded-3"><div class="card-body">
  	  <h5 class="card-title">Commande n°{{ $orders->count() - $idx }}</h5>
      <p class="text-muted mb-1">Passée le {{ $order->created_at->format('d/m/Y H:i') }} — Total : {{ $order->total_price }} €</p>
      <ul class="mb-2">
        @foreach($order->items as $it)
          <li>{{ $it->plant->name }} × {{ $it->quantity }} – {{ $it->plant->price }} €</li>
        @endforeach
      </ul>
      <p><strong>Statut :</strong> {{ $order->status }}</p>
    </div></div>
  @endforeach
@endif
@endsection


# resources/views/layouts/guest.blade.php

<!DOCTYPE html>
<html lang="{{ str_replace('_', '-', app()->getLocale()) }}">
    <head>
        <meta charset="utf-8">
        <meta name="viewport" content="width=device-width, initial-scale=1">
        <meta name="csrf-token" content="{{ csrf_token() }}">

        <title>{{ config('app.name', 'Laravel') }}</title>

        <!-- Fonts -->
        <link rel="preconnect" href="https://fonts.bunny.net">
        <link href="https://fonts.bunny.net/css?family=figtree:400,500,600&display=swap" rel="stylesheet" />

        <!-- Scripts -->
        @vite(['resources/css/app.css', 'resources/js/app.js'])
    </head>
    <body class="font-sans text-gray-900 antialiased">
        <div class="min-h-screen flex flex-col sm:justify-center items-center pt-6 sm:pt-0 bg-gray-100">
            <div>
                <a href="/">
                    <x-application-logo class="w-20 h-20 fill-current text-gray-500" />
                </a>
            </div>

            <div class="w-full sm:max-w-md mt-6 px-6 py-4 bg-white shadow-md overflow-hidden sm:rounded-lg">
                {{ $slot }}
            </div>
        </div>
    </body>
</html>


# resources/views/layouts/_navbar.blade.php

<nav class="navbar navbar-expand-lg navbar-dark rounded-3 navbar-custom px-3">
	<a class="navbar-brand fw-bold text-white" href="{{ route('home') }}">🌿 PlantShop</a>
	<button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navBar"><span class="navbar-toggler-icon"></span></button>
	<div class="collapse navbar-collapse" id="navBar">
		<ul class="navbar-nav ms-auto">
			@auth
			<li class="nav-item d-flex align-items-center text-white px-2 text-capitalize">
				{{ Auth::user()->name }}@if(Auth::user()->admin) (Administrateur)@endif
			</li>
			@endauth
			<li class="nav-item"><a class="nav-link" id="cart-link" href="{{ route('carts.index') }}">Mon Panier</a></li>
			@auth
			<li class="nav-item"><a class="nav-link" href="{{ route('orders.index') }}">Mes commandes</a></li>
			<li class="nav-item"><a class="nav-link" href="{{ route('users.show', Auth::id()) }}">Profil</a></li>
			@if(Auth::user()->admin)
			<li class="nav-item dropdown">
				<a class="nav-link dropdown-toggle" data-bs-toggle="dropdown" href="#">Admin</a>
				<ul class="dropdown-menu">
					<li><a class="dropdown-item" href="{{ route('admin.plants.index') }}">Plantes</a></li>
					<li><a class="dropdown-item" href="{{ route('admin.users.index') }}">Utilisateurs</a></li>
				</ul>
			</li>
			@endif
			<li class="nav-item ms-2">
				<form method="POST" action="{{ route('logout') }}" class="d-inline">
					@csrf
					<button type="submit" class="nav-link btn btn-link px-0 align-baseline" style="text-decoration: none;">
						Déconnexion
					</button>
				</form>
			</li>
			@else
			<li class="nav-item"><a class="nav-link" href="{{ route('register') }}">S’inscrire</a></li>
			<li class="nav-item"><a class="nav-link" href="{{ route('login') }}">Se connecter</a></li>
			@endauth
		</ul>
	</div>
</nav>


# resources/views/layouts/app.blade.php

<!DOCTYPE html><html lang="fr"><head>
  <meta charset="utf-8"><title>Plant Shop</title>
  @vite('resources/css/orange.css')
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css" rel="stylesheet">
</head><body class="bg-light">
  @include('layouts._navbar')
  <main class="container my-4">@include('layouts._flash') @yield('content')</main>
  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/js/bootstrap.bundle.min.js"></script>
  @vite('resources/js/app.js')
</body></html>


# resources/views/layouts/navigation.blade.php

<nav x-data="{ open: false }" class="bg-white border-b border-gray-100">
    <!-- Primary Navigation Menu -->
    <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
        <div class="flex justify-between h-16">
            <div class="flex">
                <!-- Logo -->
                <div class="shrink-0 flex items-center">
                    <a href="{{ route('dashboard') }}">
                        <x-application-logo class="block h-9 w-auto fill-current text-gray-800" />
                    </a>
                </div>

                <!-- Navigation Links -->
                <div class="hidden space-x-8 sm:-my-px sm:ms-10 sm:flex">
                    <x-nav-link :href="route('dashboard')" :active="request()->routeIs('dashboard')">
                        {{ __('Dashboard') }}
                    </x-nav-link>
                </div>
            </div>

            <!-- Settings Dropdown -->
            <div class="hidden sm:flex sm:items-center sm:ms-6">
                <x-dropdown align="right" width="48">
                    <x-slot name="trigger">
                        <button class="inline-flex items-center px-3 py-2 border border-transparent text-sm leading-4 font-medium rounded-md text-gray-500 bg-white hover:text-gray-700 focus:outline-none transition ease-in-out duration-150">
                            <div>{{ Auth::user()->name }}</div>

                            <div class="ms-1">
                                <svg class="fill-current h-4 w-4" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20">
                                    <path fill-rule="evenodd" d="M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z" clip-rule="evenodd" />
                                </svg>
                            </div>
                        </button>
                    </x-slot>

                    <x-slot name="content">
                        <x-dropdown-link :href="route('profile.edit')">
                            {{ __('Profile') }}
                        </x-dropdown-link>

                        <!-- Authentication -->
                        <form method="POST" action="{{ route('logout') }}">
                            @csrf

                            <x-dropdown-link :href="route('logout')"
                                    onclick="event.preventDefault();
                                                this.closest('form').submit();">
                                {{ __('Log Out') }}
                            </x-dropdown-link>
                        </form>
                    </x-slot>
                </x-dropdown>
            </div>

            <!-- Hamburger -->
            <div class="-me-2 flex items-center sm:hidden">
                <button @click="open = ! open" class="inline-flex items-center justify-center p-2 rounded-md text-gray-400 hover:text-gray-500 hover:bg-gray-100 focus:outline-none focus:bg-gray-100 focus:text-gray-500 transition duration-150 ease-in-out">
                    <svg class="h-6 w-6" stroke="currentColor" fill="none" viewBox="0 0 24 24">
                        <path :class="{'hidden': open, 'inline-flex': ! open }" class="inline-flex" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6h16M4 12h16M4 18h16" />
                        <path :class="{'hidden': ! open, 'inline-flex': open }" class="hidden" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
                    </svg>
                </button>
            </div>
        </div>
    </div>

    <!-- Responsive Navigation Menu -->
    <div :class="{'block': open, 'hidden': ! open}" class="hidden sm:hidden">
        <div class="pt-2 pb-3 space-y-1">
            <x-responsive-nav-link :href="route('dashboard')" :active="request()->routeIs('dashboard')">
                {{ __('Dashboard') }}
            </x-responsive-nav-link>
        </div>

        <!-- Responsive Settings Options -->
        <div class="pt-4 pb-1 border-t border-gray-200">
            <div class="px-4">
                <div class="font-medium text-base text-gray-800">{{ Auth::user()->name }}</div>
                <div class="font-medium text-sm text-gray-500">{{ Auth::user()->email }}</div>
            </div>

            <div class="mt-3 space-y-1">
                <x-responsive-nav-link :href="route('profile.edit')">
                    {{ __('Profile') }}
                </x-responsive-nav-link>

                <!-- Authentication -->
                <form method="POST" action="{{ route('logout') }}">
                    @csrf

                    <x-responsive-nav-link :href="route('logout')"
                            onclick="event.preventDefault();
                                        this.closest('form').submit();">
                        {{ __('Log Out') }}
                    </x-responsive-nav-link>
                </form>
            </div>
        </div>
    </div>
</nav>


# resources/views/layouts/_flash.blade.php

@if(session('notice')) <div class="alert alert-success rounded-3">{{ session('notice') }}</div>@endif
@if(session('alert'))  <div class="alert alert-danger  rounded-3">{{ session('alert')  }}</div>@endif
@if(session('success')) <div class="alert alert-success rounded-3">Commande confirmée.</div>@endif
@if(session('error')) <div class="alert alert-danger rounded-3">{{ session('error') }}</div>@endif


# resources/views/dashboard.blade.php

<x-app-layout>
    <x-slot name="header">
        <h2 class="font-semibold text-xl text-gray-800 leading-tight">
            {{ __('Dashboard') }}
        </h2>
    </x-slot>

    <div class="py-12">
        <div class="max-w-7xl mx-auto sm:px-6 lg:px-8">
            <div class="bg-white overflow-hidden shadow-sm sm:rounded-lg">
                <div class="p-6 text-gray-900">
                    {{ __("You're logged in!") }}
                </div>
            </div>
        </div>
    </div>
</x-app-layout>


# resources/views/profile/edit.blade.php

<x-app-layout>
    <x-slot name="header">
        <h2 class="font-semibold text-xl text-gray-800 leading-tight">
            {{ __('Profile') }}
        </h2>
    </x-slot>

    <div class="py-12">
        <div class="max-w-7xl mx-auto sm:px-6 lg:px-8 space-y-6">
            <div class="p-4 sm:p-8 bg-white shadow sm:rounded-lg">
                <div class="max-w-xl">
                    @include('profile.partials.update-profile-information-form')
                </div>
            </div>

            <div class="p-4 sm:p-8 bg-white shadow sm:rounded-lg">
                <div class="max-w-xl">
                    @include('profile.partials.update-password-form')
                </div>
            </div>

            <div class="p-4 sm:p-8 bg-white shadow sm:rounded-lg">
                <div class="max-w-xl">
                    @include('profile.partials.delete-user-form')
                </div>
            </div>
        </div>
    </div>
</x-app-layout>


# resources/views/profile/partials/update-profile-information-form.blade.php

<section>
    <header>
        <h2 class="text-lg font-medium text-gray-900">
            {{ __('Profile Information') }}
        </h2>

        <p class="mt-1 text-sm text-gray-600">
            {{ __("Update your account's profile information and email address.") }}
        </p>
    </header>

    <form id="send-verification" method="post" action="{{ route('verification.send') }}">
        @csrf
    </form>

    <form method="post" action="{{ route('profile.update') }}" class="mt-6 space-y-6">
        @csrf
        @method('patch')

        <div>
            <x-input-label for="name" :value="__('Name')" />
            <x-text-input id="name" name="name" type="text" class="mt-1 block w-full" :value="old('name', $user->name)" required autofocus autocomplete="name" />
            <x-input-error class="mt-2" :messages="$errors->get('name')" />
        </div>

        <div>
            <x-input-label for="email" :value="__('Email')" />
            <x-text-input id="email" name="email" type="email" class="mt-1 block w-full" :value="old('email', $user->email)" required autocomplete="username" />
            <x-input-error class="mt-2" :messages="$errors->get('email')" />

            @if ($user instanceof \Illuminate\Contracts\Auth\MustVerifyEmail && ! $user->hasVerifiedEmail())
                <div>
                    <p class="text-sm mt-2 text-gray-800">
                        {{ __('Your email address is unverified.') }}

                        <button form="send-verification" class="underline text-sm text-gray-600 hover:text-gray-900 rounded-md focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500">
                            {{ __('Click here to re-send the verification email.') }}
                        </button>
                    </p>

                    @if (session('status') === 'verification-link-sent')
                        <p class="mt-2 font-medium text-sm text-green-600">
                            {{ __('A new verification link has been sent to your email address.') }}
                        </p>
                    @endif
                </div>
            @endif
        </div>

        <div class="flex items-center gap-4">
            <x-primary-button>{{ __('Save') }}</x-primary-button>

            @if (session('status') === 'profile-updated')
                <p
                    x-data="{ show: true }"
                    x-show="show"
                    x-transition
                    x-init="setTimeout(() => show = false, 2000)"
                    class="text-sm text-gray-600"
                >{{ __('Saved.') }}</p>
            @endif
        </div>
    </form>
</section>


# resources/views/profile/partials/update-password-form.blade.php

<section>
    <header>
        <h2 class="text-lg font-medium text-gray-900">
            {{ __('Update Password') }}
        </h2>

        <p class="mt-1 text-sm text-gray-600">
            {{ __('Ensure your account is using a long, random password to stay secure.') }}
        </p>
    </header>

    <form method="post" action="{{ route('password.update') }}" class="mt-6 space-y-6">
        @csrf
        @method('put')

        <div>
            <x-input-label for="update_password_current_password" :value="__('Current Password')" />
            <x-text-input id="update_password_current_password" name="current_password" type="password" class="mt-1 block w-full" autocomplete="current-password" />
            <x-input-error :messages="$errors->updatePassword->get('current_password')" class="mt-2" />
        </div>

        <div>
            <x-input-label for="update_password_password" :value="__('New Password')" />
            <x-text-input id="update_password_password" name="password" type="password" class="mt-1 block w-full" autocomplete="new-password" />
            <x-input-error :messages="$errors->updatePassword->get('password')" class="mt-2" />
        </div>

        <div>
            <x-input-label for="update_password_password_confirmation" :value="__('Confirm Password')" />
            <x-text-input id="update_password_password_confirmation" name="password_confirmation" type="password" class="mt-1 block w-full" autocomplete="new-password" />
            <x-input-error :messages="$errors->updatePassword->get('password_confirmation')" class="mt-2" />
        </div>

        <div class="flex items-center gap-4">
            <x-primary-button>{{ __('Save') }}</x-primary-button>

            @if (session('status') === 'password-updated')
                <p
                    x-data="{ show: true }"
                    x-show="show"
                    x-transition
                    x-init="setTimeout(() => show = false, 2000)"
                    class="text-sm text-gray-600"
                >{{ __('Saved.') }}</p>
            @endif
        </div>
    </form>
</section>


# resources/views/profile/partials/delete-user-form.blade.php

<section class="space-y-6">
    <header>
        <h2 class="text-lg font-medium text-gray-900">
            {{ __('Delete Account') }}
        </h2>

        <p class="mt-1 text-sm text-gray-600">
            {{ __('Once your account is deleted, all of its resources and data will be permanently deleted. Before deleting your account, please download any data or information that you wish to retain.') }}
        </p>
    </header>

    <x-danger-button
        x-data=""
        x-on:click.prevent="$dispatch('open-modal', 'confirm-user-deletion')"
    >{{ __('Delete Account') }}</x-danger-button>

    <x-modal name="confirm-user-deletion" :show="$errors->userDeletion->isNotEmpty()" focusable>
        <form method="post" action="{{ route('profile.destroy') }}" class="p-6">
            @csrf
            @method('delete')

            <h2 class="text-lg font-medium text-gray-900">
                {{ __('Are you sure you want to delete your account?') }}
            </h2>

            <p class="mt-1 text-sm text-gray-600">
                {{ __('Once your account is deleted, all of its resources and data will be permanently deleted. Please enter your password to confirm you would like to permanently delete your account.') }}
            </p>

            <div class="mt-6">
                <x-input-label for="password" value="{{ __('Password') }}" class="sr-only" />

                <x-text-input
                    id="password"
                    name="password"
                    type="password"
                    class="mt-1 block w-3/4"
                    placeholder="{{ __('Password') }}"
                />

                <x-input-error :messages="$errors->userDeletion->get('password')" class="mt-2" />
            </div>

            <div class="mt-6 flex justify-end">
                <x-secondary-button x-on:click="$dispatch('close')">
                    {{ __('Cancel') }}
                </x-secondary-button>

                <x-danger-button class="ms-3">
                    {{ __('Delete Account') }}
                </x-danger-button>
            </div>
        </form>
    </x-modal>
</section>


# resources/views/auth/confirm-password.blade.php

<x-guest-layout>
    <div class="mb-4 text-sm text-gray-600">
        {{ __('This is a secure area of the application. Please confirm your password before continuing.') }}
    </div>

    <form method="POST" action="{{ route('password.confirm') }}">
        @csrf

        <!-- Password -->
        <div>
            <x-input-label for="password" :value="__('Password')" />

            <x-text-input id="password" class="block mt-1 w-full"
                            type="password"
                            name="password"
                            required autocomplete="current-password" />

            <x-input-error :messages="$errors->get('password')" class="mt-2" />
        </div>

        <div class="flex justify-end mt-4">
            <x-primary-button>
                {{ __('Confirm') }}
            </x-primary-button>
        </div>
    </form>
</x-guest-layout>


# resources/views/auth/reset-password.blade.php

<x-guest-layout>
    <form method="POST" action="{{ route('password.store') }}">
        @csrf

        <!-- Password Reset Token -->
        <input type="hidden" name="token" value="{{ $request->route('token') }}">

        <!-- Email Address -->
        <div>
            <x-input-label for="email" :value="__('Email')" />
            <x-text-input id="email" class="block mt-1 w-full" type="email" name="email" :value="old('email', $request->email)" required autofocus autocomplete="username" />
            <x-input-error :messages="$errors->get('email')" class="mt-2" />
        </div>

        <!-- Password -->
        <div class="mt-4">
            <x-input-label for="password" :value="__('Password')" />
            <x-text-input id="password" class="block mt-1 w-full" type="password" name="password" required autocomplete="new-password" />
            <x-input-error :messages="$errors->get('password')" class="mt-2" />
        </div>

        <!-- Confirm Password -->
        <div class="mt-4">
            <x-input-label for="password_confirmation" :value="__('Confirm Password')" />

            <x-text-input id="password_confirmation" class="block mt-1 w-full"
                                type="password"
                                name="password_confirmation" required autocomplete="new-password" />

            <x-input-error :messages="$errors->get('password_confirmation')" class="mt-2" />
        </div>

        <div class="flex items-center justify-end mt-4">
            <x-primary-button>
                {{ __('Reset Password') }}
            </x-primary-button>
        </div>
    </form>
</x-guest-layout>


# resources/views/auth/register.blade.php

<x-guest-layout>
    <form method="POST" action="{{ route('register') }}">
        @csrf

        <!-- Name -->
        <div>
            <x-input-label for="name" :value="__('Name')" />
            <x-text-input id="name" class="block mt-1 w-full" type="text" name="name" :value="old('name')" required autofocus autocomplete="name" />
            <x-input-error :messages="$errors->get('name')" class="mt-2" />
        </div>

        <!-- Email Address -->
        <div class="mt-4">
            <x-input-label for="email" :value="__('Email')" />
            <x-text-input id="email" class="block mt-1 w-full" type="email" name="email" :value="old('email')" required autocomplete="username" />
            <x-input-error :messages="$errors->get('email')" class="mt-2" />
        </div>

        <!-- Password -->
        <div class="mt-4">
            <x-input-label for="password" :value="__('Password')" />

            <x-text-input id="password" class="block mt-1 w-full"
                            type="password"
                            name="password"
                            required autocomplete="new-password" />

            <x-input-error :messages="$errors->get('password')" class="mt-2" />
        </div>

        <!-- Confirm Password -->
        <div class="mt-4">
            <x-input-label for="password_confirmation" :value="__('Confirm Password')" />

            <x-text-input id="password_confirmation" class="block mt-1 w-full"
                            type="password"
                            name="password_confirmation" required autocomplete="new-password" />

            <x-input-error :messages="$errors->get('password_confirmation')" class="mt-2" />
        </div>

        <div class="flex items-center justify-end mt-4">
            <a class="underline text-sm text-gray-600 hover:text-gray-900 rounded-md focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500" href="{{ route('login') }}">
                {{ __('Already registered?') }}
            </a>

            <x-primary-button class="ms-4">
                {{ __('Register') }}
            </x-primary-button>
        </div>
    </form>
</x-guest-layout>


# resources/views/auth/custom-login.blade.php

@extends('layouts.app')

@section('content')
<h1>Connexion</h1>
<form method="POST" action="{{ route('login') }}" class="w-100" style="max-width: 500px">
    @csrf

    <div class="mb-3">
        <label class="form-label">Email</label>
        <input name="email" type="email" class="form-control" value="{{ old('email') }}" required autofocus>
    </div>

    <div class="mb-3">
        <label class="form-label">Mot de passe</label>
        <input name="password" type="password" class="form-control" required>
    </div>

    <div class="mb-3 form-check">
        <input name="remember" type="checkbox" class="form-check-input" id="remember">
        <label class="form-check-label" for="remember">Se souvenir de moi</label>
    </div>

    <button type="submit" class="btn btn-primary">Se connecter</button>
</form>
@endsection


# resources/views/auth/verify-email.blade.php

<x-guest-layout>
    <div class="mb-4 text-sm text-gray-600">
        {{ __('Thanks for signing up! Before getting started, could you verify your email address by clicking on the link we just emailed to you? If you didn\'t receive the email, we will gladly send you another.') }}
    </div>

    @if (session('status') == 'verification-link-sent')
        <div class="mb-4 font-medium text-sm text-green-600">
            {{ __('A new verification link has been sent to the email address you provided during registration.') }}
        </div>
    @endif

    <div class="mt-4 flex items-center justify-between">
        <form method="POST" action="{{ route('verification.send') }}">
            @csrf

            <div>
                <x-primary-button>
                    {{ __('Resend Verification Email') }}
                </x-primary-button>
            </div>
        </form>

        <form method="POST" action="{{ route('logout') }}">
            @csrf

            <button type="submit" class="underline text-sm text-gray-600 hover:text-gray-900 rounded-md focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500">
                {{ __('Log Out') }}
            </button>
        </form>
    </div>
</x-guest-layout>


# resources/views/auth/custom-register.blade.php

@extends('layouts.app')

@section('content')
<h1>Inscription</h1>
<form method="POST" action="{{ route('register') }}" class="w-100" style="max-width: 500px">
    @csrf

    <div class="mb-3">
        <label class="form-label">Nom</label>
        <input name="name" type="text" class="form-control" value="{{ old('name') }}" required autofocus>
    </div>

    <div class="mb-3">
        <label class="form-label">Email</label>
        <input name="email" type="email" class="form-control" value="{{ old('email') }}" required>
    </div>

    <div class="mb-3">
        <label class="form-label">Mot de passe</label>
        <input name="password" type="password" class="form-control" required>
    </div>

    <div class="mb-3">
        <label class="form-label">Confirmation</label>
        <input name="password_confirmation" type="password" class="form-control" required>
    </div>

    <button type="submit" class="btn btn-success">S’inscrire</button>
</form>
@endsection


# resources/views/auth/login.blade.php

<x-guest-layout>
    <!-- Session Status -->
    <x-auth-session-status class="mb-4" :status="session('status')" />

    <form method="POST" action="{{ route('login') }}">
        @csrf

        <!-- Email Address -->
        <div>
            <x-input-label for="email" :value="__('Email')" />
            <x-text-input id="email" class="block mt-1 w-full" type="email" name="email" :value="old('email')" required autofocus autocomplete="username" />
            <x-input-error :messages="$errors->get('email')" class="mt-2" />
        </div>

        <!-- Password -->
        <div class="mt-4">
            <x-input-label for="password" :value="__('Password')" />

            <x-text-input id="password" class="block mt-1 w-full"
                            type="password"
                            name="password"
                            required autocomplete="current-password" />

            <x-input-error :messages="$errors->get('password')" class="mt-2" />
        </div>

        <!-- Remember Me -->
        <div class="block mt-4">
            <label for="remember_me" class="inline-flex items-center">
                <input id="remember_me" type="checkbox" class="rounded border-gray-300 text-indigo-600 shadow-sm focus:ring-indigo-500" name="remember">
                <span class="ms-2 text-sm text-gray-600">{{ __('Remember me') }}</span>
            </label>
        </div>

        <div class="flex items-center justify-end mt-4">
            @if (Route::has('password.request'))
                <a class="underline text-sm text-gray-600 hover:text-gray-900 rounded-md focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500" href="{{ route('password.request') }}">
                    {{ __('Forgot your password?') }}
                </a>
            @endif

            <x-primary-button class="ms-3">
                {{ __('Log in') }}
            </x-primary-button>
        </div>
    </form>
</x-guest-layout>


# resources/views/auth/forgot-password.blade.php

<x-guest-layout>
    <div class="mb-4 text-sm text-gray-600">
        {{ __('Forgot your password? No problem. Just let us know your email address and we will email you a password reset link that will allow you to choose a new one.') }}
    </div>

    <!-- Session Status -->
    <x-auth-session-status class="mb-4" :status="session('status')" />

    <form method="POST" action="{{ route('password.email') }}">
        @csrf

        <!-- Email Address -->
        <div>
            <x-input-label for="email" :value="__('Email')" />
            <x-text-input id="email" class="block mt-1 w-full" type="email" name="email" :value="old('email')" required autofocus />
            <x-input-error :messages="$errors->get('email')" class="mt-2" />
        </div>

        <div class="flex items-center justify-end mt-4">
            <x-primary-button>
                {{ __('Email Password Reset Link') }}
            </x-primary-button>
        </div>
    </form>
</x-guest-layout>


# resources/views/users/show.blade.php

@extends('layouts.app')
@section('content')
<h1>Mon profil</h1>
<p><strong>Nom :</strong> {{ $user->name }}</p>
<p><strong>Email :</strong> {{ $user->email }}</p>
<a class="btn btn-warning rounded-3" href="{{ route('users.edit',$user) }}">Modifier</a>
@endsection


# resources/views/users/edit.blade.php

@extends('layouts.app')
@section('content')
<h1>Modifier mon profil</h1>
<form method="POST" action="{{ route('users.update',$user) }}">@csrf @method('PUT')
  <div class="mb-3"><label class="form-label">Nom</label><input class="form-control rounded-3" name="name" value="{{ old('name',$user->name) }}"></div>
  <div class="mb-3"><label class="form-label">Email</label><input type="email" class="form-control rounded-3" name="email" value="{{ old('email',$user->email) }}"></div>
  <button class="btn btn-warning rounded-3">Enregistrer</button>
</form>
@endsection


# resources/js/app.js

import './bootstrap';
import './cart.js';

import Alpine from 'alpinejs';

window.Alpine = Alpine;

Alpine.start();


# resources/js/bootstrap.js

import axios from 'axios';
window.axios = axios;

window.axios.defaults.headers.common['X-Requested-With'] = 'XMLHttpRequest';


# resources/js/cart.js

window.Cart = {
    get() {
        try {
            return JSON.parse(localStorage.getItem("cart") || "{}");
        } catch (e) {
            console.error("Erreur JSON", e);
            return {};
        }
    },

    save(cart) {
        localStorage.setItem("cart", JSON.stringify(cart));
    },

    add(id, name, price, stock) {
        const cart = this.get();
        if (cart[id]) {
            cart[id].quantity += 1;
        } else {
            cart[id] = { id, name, price, quantity: 1, stock };
        }
        this.save(cart);
        this.updateNavbarCount();
    },

    update(id, newQty) {
        const qty = parseInt(newQty);
        if (isNaN(qty)) return;

        const cart = this.get();
        if (!cart[id]) return;

        const input = document.querySelector(
            "input[data-cart-id='" + id + "']"
        );
        const stock = parseInt(input.dataset.stock || "1");

        let correctedQty = qty;
        if (qty < 1) correctedQty = 1;
        if (qty > stock) correctedQty = stock;

        cart[id].quantity = correctedQty;
        input.value = correctedQty;

        this.save(cart);
        this.render();
    },

    delayedUpdate(id, inputElem) {
        clearTimeout(inputElem._cartTimer);
        inputElem._cartTimer = setTimeout(() => {
            this.update(id, inputElem.value);
        }, 300);
    },

    remove(id) {
        const cart = this.get();
        delete cart[id];
        this.save(cart);
        this.render();
    },

    clear() {
        localStorage.removeItem("cart");
        this.render();
    },

    updateNavbarCount() {
        const cart = this.get();
        let count = 0;
        for (const id in cart) {
            count += cart[id].quantity;
        }
        const link = document.getElementById("cart-link");
        if (link) {
            link.innerText =
                "Mon Panier" + (count > 0 ? " (" + count + ")" : "");
        }
    },

    render() {
        const container = document.getElementById("cart-container");
        if (!container) return;

        const cart = this.get();
        let html = "";
        let total = 0;

        if (Object.keys(cart).length === 0) {
            html = "<p class='alert alert-info'>Votre panier est vide.</p>";
        } else {
            html += `
        <table class="table">
          <thead class="table-dark">
            <tr><th>Plante</th><th>Quantité</th><th>Action</th></tr>
          </thead><tbody>`;

            for (const id in cart) {
                const item = cart[id];
                total += item.price * item.quantity;
                html += `
          <tr>
            <td><a href="/plants/${id}" class="text-decoration-none">${item.name}</a></td>
            <td><input type="number" min="1" class="form-control form-control-sm" style="max-width: 70px;"
              value="${item.quantity}" data-cart-id="${id}" data-stock="${item.stock}"
              oninput="Cart.delayedUpdate(${id}, this)"></td>
            <td><button class="btn btn-danger btn-sm" onclick="Cart.remove(${id})">Retirer</button></td>
          </tr>`;
            }

            html += `</tbody></table><p class="text-end fw-bold">Total : ${total} €</p>
        <div class="d-flex justify-content-between">
          <button class="btn btn-outline-secondary btn-sm" onclick="Cart.clear()">Vider le panier</button>
          <a href="/orders/create" class="btn btn-primary">Passer la commande</a>
        </div>`;
        }

        container.innerHTML = html;
    },

    renderOrderReview(
        containerId = "order-review-container",
        inputId = "order-items-input"
    ) {
        const container = document.getElementById(containerId);
        const input = document.getElementById(inputId);
        const cart = this.get();

        // Eviter rendu si alert succès ou erreur affichée
        if (
            document.querySelector(".alert-success") ||
            document.querySelector(".alert-danger")
        ) {
            container.innerHTML = "";
            return;
        }
        if (!container || !input) return;

        if (Object.keys(cart).length === 0) {
            container.innerHTML =
                '<p class="alert alert-warning">Votre panier est vide.</p>';
            input.value = "";
            return;
        }

        let total = 0;
        let html = `<table class="table shadow"><thead class="table-dark"><tr><th>Plante</th><th>Quantité</th><th>Total</th></tr></thead><tbody>`;
        const items = [];

        for (const id in cart) {
            const item = cart[id];
            const subtotal = item.quantity * item.price;
            total += subtotal;
            html += `<tr><td><a href="/plants/${item.id}" class="cart-plant-link">${item.name}</a></td><td>${item.quantity}</td><td>${subtotal} €</td></tr>`;
            items.push({ plant_id: parseInt(id), quantity: item.quantity });
        }

        html += `</tbody></table><p class="text-end fw-bold">Total : ${total} €</p>`;
        container.innerHTML = html;
        input.value = JSON.stringify(items);
    },
};

function applyStockAdjustmentFromAlert() {
  const alert = document.querySelector("[data-stock-adjust]");
  if (!alert) return;

  try {
      const data = JSON.parse(alert.dataset.stockAdjust);
      const { id, available } = data;
      const cart = Cart.get();

      if (available > 0 && cart[id]) {
          cart[id].quantity = available;
          cart[id].stock = available;
      } else {
          delete cart[id];
      }

      Cart.save(cart);
      Cart.render();
      Cart.renderOrderReview();
  } catch (e) {
      console.error("Erreur ajustement stock :", e);
  }
}

document.addEventListener("DOMContentLoaded", function () {
    Cart.updateNavbarCount();
    Cart.render();
    Cart.renderOrderReview();
    applyStockAdjustmentFromAlert();
});

==== STRUCTURE DU PROJET (filtres appliqués) ====
./
├── app/
│   ├── Http/
│   │   ├── Controllers/
│   │   │   ├── Admin/
│   │   │   │   ├── PlantsController.php
│   │   │   │   └── UsersController.php
│   │   │   ├── Auth/
│   │   │   │   ├── AuthenticatedSessionController.php
│   │   │   │   ├── ConfirmablePasswordController.php
│   │   │   │   ├── EmailVerificationNotificationController.php
│   │   │   │   ├── EmailVerificationPromptController.php
│   │   │   │   ├── NewPasswordController.php
│   │   │   │   ├── PasswordController.php
│   │   │   │   ├── PasswordResetLinkController.php
│   │   │   │   ├── RegisteredUserController.php
│   │   │   │   └── VerifyEmailController.php
│   │   │   ├── CartController.php
│   │   │   ├── Controller.php
│   │   │   ├── OrdersController.php
│   │   │   ├── PlantsController.php
│   │   │   ├── ProfileController.php
│   │   │   └── UsersController.php
│   │   └── Requests/
│   │       ├── Auth/
│   │       │   └── LoginRequest.php
│   │       └── ProfileUpdateRequest.php
│   ├── Models/
│   │   ├── Models/
│   │   │   ├── OrderItem.php
│   │   │   ├── Order.php
│   │   │   ├── Plant.php
│   │   │   └── User.php
│   │   ├── OrderItem.php
│   │   ├── Order.php
│   │   ├── Plant.php
│   │   └── User.php
│   ├── Providers/
│   │   └── AppServiceProvider.php
│   └── View/
│       └── Components/
│           ├── AppLayout.php
│           └── GuestLayout.php
├── artisan*
├── bootstrap/
│   ├── app.php
│   ├── cache/
│   │   ├── .gitignore
│   │   ├── packages.php*
│   │   └── services.php*
│   └── providers.php
├── composer.json
├── composer.lock
├── config/
│   ├── app.php
│   ├── auth.php
│   ├── cache.php
│   ├── database.php
│   ├── filesystems.php
│   ├── logging.php
│   ├── mail.php
│   ├── queue.php
│   ├── services.php
│   └── session.php
├── database/
│   ├── database.sqlite
│   ├── factories/
│   │   └── UserFactory.php
│   ├── .gitignore
│   ├── migrations/
│   │   ├── 2025_05_02_162735_setup_all_tables.php
│   │   └── 2025_05_02_190618_create_sessions_table.php
│   └── seeders/
│       └── DatabaseSeeder.php
├── .editorconfig
├── .env
├── .env.example
├── .git/
│   ├── branches/
│   ├── COMMIT_EDITMSG
│   ├── config
│   ├── description
│   ├── FETCH_HEAD
│   ├── gitk.cache
│   ├── HEAD
│   ├── hooks/
│   │   ├── applypatch-msg.sample*
│   │   ├── commit-msg.sample*
│   │   ├── fsmonitor-watchman.sample*
│   │   ├── post-update.sample*
│   │   ├── pre-applypatch.sample*
│   │   ├── pre-commit.sample*
│   │   ├── pre-merge-commit.sample*
│   │   ├── prepare-commit-msg.sample*
│   │   ├── pre-push.sample*
│   │   ├── pre-rebase.sample*
│   │   ├── pre-receive.sample*
│   │   ├── push-to-checkout.sample*
│   │   ├── sendemail-validate.sample*
│   │   └── update.sample*
│   ├── index
│   ├── info/
│   │   └── exclude
│   ├── logs/
│   │   ├── HEAD
│   │   └── refs/
│   │       ├── heads/
│   │       │   └── master
│   │       └── remotes/
│   │           └── origin/
│   │               └── master
│   ├── packed-refs
│   └── refs/
│       ├── heads/
│       │   └── master
│       ├── remotes/
│       │   └── origin/
│       │       └── master
│       └── tags/
├── .gitattributes
├── .gitignore
├── Makefile
├── package.json
├── package-lock.json
├── phpunit.xml
├── postcss.config.js
├── projet.txt
├── public/
│   ├── build/
│   │   ├── assets/
│   │   │   ├── app-BbPOqj5z.js
│   │   │   ├── app-BuvcaiTF.css
│   │   │   └── orange-NDs0pG5x.css
│   │   └── manifest.json
│   ├── favicon.ico
│   ├── .htaccess
│   ├── index.php
│   ├── plantshop - content.ico:Zone.Identifier
│   ├── robots.txt
│   └── svg/
│       ├── laravel-dark.svg
│       ├── laravel-light.svg
│       └── laravel-logo.svg
├── README.md
├── resources/
│   ├── css/
│   │   ├── app.css
│   │   └── orange.css
│   ├── js/
│   │   ├── app.js
│   │   ├── bootstrap.js
│   │   └── cart.js
│   └── views/
│       ├── admin/
│       │   ├── plants/
│       │   │   ├── create.blade.php
│       │   │   ├── .create.blade.php.swp
│       │   │   ├── edit.blade.php
│       │   │   ├── .edit.blade.php.swp
│       │   │   ├── _form.blade.php
│       │   │   └── index.blade.php
│       │   └── users/
│       │       ├── edit.blade.php
│       │       ├── index.blade.php
│       │       └── show.blade.php
│       ├── auth/
│       │   ├── confirm-password.blade.php
│       │   ├── custom-login.blade.php
│       │   ├── custom-register.blade.php
│       │   ├── forgot-password.blade.php
│       │   ├── login.blade.php
│       │   ├── register.blade.php
│       │   ├── reset-password.blade.php
│       │   └── verify-email.blade.php
│       ├── carts/
│       │   └── index.blade.php
│       ├── components/
│       │   ├── application-logo.blade.php
│       │   ├── auth-session-status.blade.php
│       │   ├── danger-button.blade.php
│       │   ├── dropdown.blade.php
│       │   ├── dropdown-link.blade.php
│       │   ├── input-error.blade.php
│       │   ├── input-label.blade.php
│       │   ├── modal.blade.php
│       │   ├── nav-link.blade.php
│       │   ├── primary-button.blade.php
│       │   ├── responsive-nav-link.blade.php
│       │   ├── secondary-button.blade.php
│       │   └── text-input.blade.php
│       ├── dashboard.blade.php
│       ├── layouts/
│       │   ├── app.blade.php
│       │   ├── _flash.blade.php
│       │   ├── guest.blade.php
│       │   ├── _navbar.blade.php
│       │   └── navigation.blade.php
│       ├── orders/
│       │   ├── create.blade.php
│       │   ├── index.blade.php
│       │   └── new.blade.php
│       ├── plants/
│       │   ├── index.blade.php
│       │   └── show.blade.php
│       ├── profile/
│       │   ├── edit.blade.php
│       │   └── partials/
│       │       ├── delete-user-form.blade.php
│       │       ├── update-password-form.blade.php
│       │       └── update-profile-information-form.blade.php
│       └── users/
│           ├── edit.blade.php
│           ├── .edit.blade.php.swp
│           └── show.blade.php
├── routes/
│   ├── auth.php
│   ├── console.php
│   └── web.php
├── script.sh*
├── tailwind.config.js
├── tests/
│   ├── Feature/
│   │   ├── Auth/
│   │   │   ├── AuthenticationTest.php
│   │   │   ├── EmailVerificationTest.php
│   │   │   ├── PasswordConfirmationTest.php
│   │   │   ├── PasswordResetTest.php
│   │   │   ├── PasswordUpdateTest.php
│   │   │   └── RegistrationTest.php
│   │   ├── ExampleTest.php
│   │   └── ProfileTest.php
│   ├── TestCase.php
│   └── Unit/
│       └── ExampleTest.php
├── users.txt
└── vite.config.js

59 directories, 177 files
